name: Build and Push Docker Image
on:
  push:
    branches: [ "main" ]
    paths:
      - '.version' # 仅当 .version 文件变化时触发
  pull_request:
    branches: [ "main" ]
    paths:
      - '.version' # PR 中 .version 文件变化时也触发
  # 也可以手动触发
  workflow_dispatch:
jobs:  
  build-and-push:  
    runs-on: ubuntu-latest  
    permissions:  
      contents: read  
      packages: write  
    steps:  
      - name: Checkout repository  
        uses: actions/checkout@v4  
      - name: Set up Docker Buildx  
        uses: docker/setup-buildx-action@v3  
      # 登录到 GitHub 容器仓库  
      - name: Login to GitHub Container Registry  
        uses: docker/login-action@v3  
        with:  
          registry: ghcr.io  
          username: ${{ github.repository_owner }}  
          password: ${{ secrets.GITHUB_TOKEN }}  
      # 从 .version 文件读取项目名称和版本号
      - name: Extract project info from .version file
        id: project-info
        run: |
          # 解析 .version 文件
          PROJECT_NAME=$(grep '^project_name=' .version | cut -d'=' -f2)
          VERSION=$(grep '^version=' .version | cut -d'=' -f2)

          # 确保镜像名称为小写
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          PROJECT_NAME_LOWER=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]')

          # 设置输出变量
          echo "PROJECT_NAME=$PROJECT_NAME_LOWER" >> $GITHUB_OUTPUT
          echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            # 主分支推送，使用 v{version} 格式
            echo "TAG=v${VERSION}" >> $GITHUB_OUTPUT
          else
            # PR 或其他情况，使用日期和 SHA
            SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-7)
            DATE=$(date +'%Y%m%d')
            echo "TAG=v${VERSION}-${DATE}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

          echo "📋 Extracted Information:"
          echo "  Original project name: $PROJECT_NAME"
          echo "  Lowercase project name: $PROJECT_NAME_LOWER"
          echo "  Repository owner: ${{ github.repository_owner }}"
          echo "  Lowercase repo owner: $REPO_OWNER"
          echo "  Version: $VERSION"
          echo "  Generated tag: $(if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then echo "v${VERSION}"; else echo "v${VERSION}-${DATE}-${SHORT_SHA}"; fi)"

      - name: Build and Push Multi-Architecture Images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ steps.project-info.outputs.REPO_OWNER }}/${{ steps.project-info.outputs.PROJECT_NAME }}:latest
            ghcr.io/${{ steps.project-info.outputs.REPO_OWNER }}/${{ steps.project-info.outputs.PROJECT_NAME }}:${{ steps.project-info.outputs.TAG }}
      
      # 输出构建摘要信息
      - name: Build Summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Event Type** | \`${{ github.event_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch/Tag** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit SHA** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Time** | \`$(date -u)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Architectures** | \`linux/amd64\`, \`linux/arm64\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Docker Repository** | \`ghcr.io/${{ steps.project-info.outputs.REPO_OWNER }}/${{ steps.project-info.outputs.PROJECT_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Package Name** | \`${{ steps.project-info.outputs.PROJECT_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Package Version** | \`${{ steps.project-info.outputs.VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Action** | ✅ **Built and Pushed** |" >> $GITHUB_STEP_SUMMARY
          echo "| **Registry** | GitHub Container Registry |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Generated Tags:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "ghcr.io/${{ steps.project-info.outputs.REPO_OWNER }}/${{ steps.project-info.outputs.PROJECT_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "ghcr.io/${{ steps.project-info.outputs.REPO_OWNER }}/${{ steps.project-info.outputs.PROJECT_NAME }}:${{ steps.project-info.outputs.TAG }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Usage Examples:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull latest version (recommended)" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/${{ steps.project-info.outputs.REPO_OWNER }}/${{ steps.project-info.outputs.PROJECT_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Pull specific version" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/${{ steps.project-info.outputs.REPO_OWNER }}/${{ steps.project-info.outputs.PROJECT_NAME }}:${{ steps.project-info.outputs.TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run container" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8282:8282 -v \$(pwd)/proxy.txt:/app/config/proxy.txt ghcr.io/${{ steps.project-info.outputs.REPO_OWNER }}/${{ steps.project-info.outputs.PROJECT_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Build success notification
        run: |
          echo "✅ Multi-architecture Docker image build completed successfully!"
          echo "📊 Build Time: $(date -u)"
          echo "🏗️ Architectures: linux/amd64, linux/arm64"
          echo "🐳 Docker Repository: ghcr.io/${{ steps.project-info.outputs.REPO_OWNER }}/${{ steps.project-info.outputs.PROJECT_NAME }}"
          echo "📦 Package: ${{ steps.project-info.outputs.PROJECT_NAME }}"
          echo "🔖 Version: ${{ steps.project-info.outputs.VERSION }}"
          echo "📤 Pushed to GitHub Container Registry"
          echo "🏷️ Tags pushed:"
          echo "  - latest (always updated)"
          echo "  - ${{ steps.project-info.outputs.TAG }} (version tag)"
